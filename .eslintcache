[{"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\index.js":"1","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\App.js":"2","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Upload.js":"4","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Board.js":"5","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\firebase.js":"6","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\CardInfo.js":"7","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\style\\BoardStyle.js":"8","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Root.js":"9","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Child.js":"10","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\WaitingRoom.js":"11","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Deck.js":"12","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Memory.js":"13","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Hand.js":"14","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Clock.js":"15","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\FrontRow.js":"16","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\BackRow.js":"17","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Level.js":"18","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Stock.js":"19","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\CheckZone.js":"20","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ClimaxZone.js":"21","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\LogIn.js":"22","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\style\\CardInfoStyle.js":"23","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\style\\AppStyle.js":"24","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Register.js":"25","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Profile.js":"26","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\reducer\\index.js":"27","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\reducer\\FrontRowReducer.js":"28","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ViewDeck.js":"29","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\RegisterStatus.js":"30","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ResetPassword.js":"31","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ResetPasswordStatus.js":"32","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Navbar.js":"33","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ViewCard.js":"34","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Series.js":"35","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\MyDeck.js":"36","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Modal.js":"37","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\AddDeck.js":"38","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Play.js":"39","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Invited.js":"40"},{"size":762,"mtime":1621877574914,"results":"41","hashOfConfig":"42"},{"size":1721,"mtime":1622403391342,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":499162500000,"results":"44","hashOfConfig":"42"},{"size":11178,"mtime":1621877574910,"results":"45","hashOfConfig":"42"},{"size":19901,"mtime":1622403391344,"results":"46","hashOfConfig":"42"},{"size":466,"mtime":1608715795524,"results":"47","hashOfConfig":"42"},{"size":2190,"mtime":1622403391345,"results":"48","hashOfConfig":"42"},{"size":2110,"mtime":1622403391351,"results":"49","hashOfConfig":"42"},{"size":437,"mtime":1610133193719,"results":"50","hashOfConfig":"42"},{"size":311,"mtime":1610070892244,"results":"51","hashOfConfig":"42"},{"size":3619,"mtime":1621877574913,"results":"52","hashOfConfig":"42"},{"size":4788,"mtime":1621877574899,"results":"53","hashOfConfig":"42"},{"size":2038,"mtime":1621877574903,"results":"54","hashOfConfig":"42"},{"size":897,"mtime":1621877574900,"results":"55","hashOfConfig":"42"},{"size":807,"mtime":1621877574898,"results":"56","hashOfConfig":"42"},{"size":3771,"mtime":1622403391346,"results":"57","hashOfConfig":"42"},{"size":3599,"mtime":1622403391343,"results":"58","hashOfConfig":"42"},{"size":971,"mtime":1621877574901,"results":"59","hashOfConfig":"42"},{"size":1136,"mtime":1621877574909,"results":"60","hashOfConfig":"42"},{"size":1600,"mtime":1621877574895,"results":"61","hashOfConfig":"42"},{"size":1799,"mtime":1621877574897,"results":"62","hashOfConfig":"42"},{"size":4237,"mtime":1622403391347,"results":"63","hashOfConfig":"42"},{"size":271,"mtime":1621877574918,"results":"64","hashOfConfig":"42"},{"size":271,"mtime":1616216350303,"results":"65","hashOfConfig":"42"},{"size":5390,"mtime":1621877574906,"results":"66","hashOfConfig":"42"},{"size":6774,"mtime":1622403391350,"results":"67","hashOfConfig":"42"},{"size":189,"mtime":1621877574915,"results":"68","hashOfConfig":"42"},{"size":480,"mtime":1621877574915,"results":"69","hashOfConfig":"42"},{"size":8731,"mtime":1622060756433,"results":"70","hashOfConfig":"42"},{"size":1396,"mtime":1621877574907,"results":"71","hashOfConfig":"42"},{"size":4415,"mtime":1621877574908,"results":"72","hashOfConfig":"42"},{"size":4408,"mtime":1621877574909,"results":"73","hashOfConfig":"42"},{"size":783,"mtime":1622403391348,"results":"74","hashOfConfig":"42"},{"size":6157,"mtime":1622404262424,"results":"75","hashOfConfig":"42"},{"size":1444,"mtime":1622045337299,"results":"76","hashOfConfig":"42"},{"size":2765,"mtime":1622240604176,"results":"77","hashOfConfig":"42"},{"size":3411,"mtime":1622049178330,"results":"78","hashOfConfig":"42"},{"size":4059,"mtime":1622061752572,"results":"79","hashOfConfig":"42"},{"size":9991,"mtime":1622403391349,"results":"80","hashOfConfig":"42"},{"size":8251,"mtime":1622403391346,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"18xsjx8",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"84"},"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\index.js",[],["176","177"],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\App.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Upload.js",[],["178","179"],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Board.js",["180"],"import React,{useState,useEffect} from 'react';\r\n//css\r\nimport style from '../style/BoardStyle';\r\n//component\r\nimport WaitingRoomComponent from './WaitingRoom';\r\nimport DeckComponent from './Deck';\r\nimport MemoryComponent from './Memory';\r\nimport HandComponent from './Hand';\r\nimport ClockComponent from './Clock';\r\nimport FrontRowComponet from './FrontRow';\r\nimport BackRowComponent from './BackRow';\r\nimport LevelComponent from './Level';\r\nimport StockComponent from './Stock';\r\nimport CheckZoneComponent from './CheckZone';\r\nimport ClimaxZoneComponent from './ClimaxZone';\r\n//firebase\r\nimport firebase from '../firebase';\r\n//bootstrap\r\nimport { Col } from 'react-bootstrap';\r\n\r\nfunction Board(props){\r\n\r\n    //player data\r\n    const [FrontRow,setFrontRow] = useState(['empty_card.jpg','empty_card.jpg','empty_card.jpg']);\r\n    const [BackRow,setBackRow] = useState(['empty_card.jpg','empty_card.jpg']);\r\n    const [Hand,setHand] = useState([]);\r\n    const [Clock,setClock] = useState(['empty_card.jpg',\r\n        'empty_card.jpg',\r\n        'empty_card.jpg',\r\n        'empty_card.jpg',\r\n        'empty_card.jpg',\r\n        'empty_card.jpg']);\r\n    const [Stock,setStock] = useState([]);\r\n    const [Level,setLevel] = useState([]);\r\n    const [Deck,setDeck] = useState(props.userDeck);\r\n    const [WaitingRoom,setWaitingRoom] = useState([]);\r\n    const [Memory,setMemory] = useState([]);\r\n    const [CheckZone,setCheckZone] = useState([]);\r\n    const [ClimaxZone,setClimaxZone] = useState([]);\r\n    \r\n    //update real-time player board\r\n    const updateplayerdata = ()=>{\r\n        const db = firebase.firestore();\r\n        let data = {\r\n            deck:Deck,\r\n            backrow:BackRow,\r\n            checkzone:CheckZone,\r\n            climaxzone:ClimaxZone,\r\n            clock:Clock,\r\n            frontrow:FrontRow,\r\n            hand:Hand,\r\n            level:Level,\r\n            memory:Memory,\r\n            stock:Stock,\r\n            waitingroom:WaitingRoom,\r\n        };\r\n        db.collection(\"board\").doc(props.userId).update(data)\r\n        .then(()=>{})\r\n        .catch(err=>console.log(err));\r\n    }\r\n\r\n    useEffect(updateplayerdata,[Deck,BackRow,CheckZone,ClimaxZone,Clock,\r\n        FrontRow,Hand,Level,Memory,Stock,WaitingRoom]);\r\n    \r\n    //opponent data\r\n    const [OpponentFrontRow,setOpponentFrontRow] = useState([]);\r\n    const [OpponentBackRow,setOpponentBackRow] = useState([]);\r\n    const [OpponentHand,setOpponentHand] = useState([]);\r\n    const [OpponentClock,setOpponentClock] = useState([]);\r\n    const [OpponentStock,setOpponentStock] = useState([]);\r\n    const [OpponentLevel,setOpponentLevel] = useState([]);\r\n    const [OpponentDeck,setOpponentDeck] = useState([]);\r\n    const [OpponentWaitingRoom,setOpponentWaitingRoom] = useState([]);\r\n    const [OpponentMemory,setOpponentMemory] = useState([]);\r\n    const [OpponentCheckZone,setOpponentCheckZone] = useState([]);\r\n    const [OpponentClimaxZone,setOpponentClimaxZone] = useState([]);\r\n        \r\n    useEffect(() => {\r\n        const db = firebase.firestore();\r\n        db.collection(\"board\").doc(props.opponentId)\r\n        .onSnapshot(function(doc) {\r\n            //console.log(doc.data())\r\n            setOpponentBackRow(doc.data().backrow)\r\n            setOpponentFrontRow(doc.data().frontrow)\r\n            setOpponentHand(doc.data().hand)\r\n            setOpponentClock(doc.data().clock)\r\n            setOpponentStock(doc.data().stock)\r\n            setOpponentLevel(doc.data().level)\r\n            setOpponentDeck(doc.data().deck)\r\n            setOpponentWaitingRoom(doc.data().waitingroom)\r\n            setOpponentMemory(doc.data().memory)\r\n            setOpponentCheckZone(doc.data().checkzone)\r\n            setOpponentClimaxZone(doc.data().climaxzone)   \r\n        }, function(error) {\r\n            console.log(error)\r\n        });\r\n    }, [props.opponentId]);\r\n\r\n    /*Drag-Drop */\r\n    const [src,setSrc] = useState(\"empty_card.jpg\");\r\n    const [drop,setDrop] = useState(false);\r\n    const [swap,setSwap] = useState(\"\");\r\n    const [zone,setZone] = useState(\"\");\r\n\r\n    const DragStart = (e)=>{\r\n        let zone = ['stock','level','waitingroom','deck','memory'];\r\n        \r\n        if(zone.includes(e.target.attributes['zone'].value)){\r\n            setSrc(e.target.attributes['real_src'].value); // real_src\r\n            setZone(e.target.attributes['zone'].value);\r\n        }\r\n        else if(!e.target.src.includes('empty_card.jpg')){\r\n            setSrc(e.target.src);\r\n            setZone(e.target.attributes['zone'].value);\r\n        }\r\n    }\r\n\r\n    const DragOver = (e)=>{\r\n        e.preventDefault();\r\n    }\r\n\r\n    const DragDrop = (e)=>{\r\n        if(src !== 'empty_card.jpg'){\r\n            let slot = ['hand','stock','level','waitingroom','deck','memory','checkzone','climaxzone'];\r\n            let n = slot.indexOf(e.target.attributes['zone'].value); // check value in list ? number : -1\r\n            if(n !== -1){\r\n                let slot_array = [Hand,Stock,Level,WaitingRoom,Deck,Memory,CheckZone,ClimaxZone];\r\n                let setslot_array = [setHand,setStock,setLevel,setWaitingRoom,setDeck,setMemory,setCheckZone,setClimaxZone];\r\n                let Dummy = [...slot_array[n]];\r\n                Dummy.push(src);\r\n                setslot_array[n](Dummy);\r\n            }else{\r\n                let slot = ['frontrow','backrow','clock'];\r\n                let slot_array = [FrontRow,BackRow,Clock];\r\n                let setslot_array = [setFrontRow,setBackRow,setClock];\r\n                n = slot.indexOf(e.target.attributes['zone'].value);\r\n                let Dummy = [...slot_array[n]];\r\n                setSwap(Dummy[parseInt(e.target.attributes[0].value)]); // swap card if card over in frontrow or backrow\r\n                if(Dummy[parseInt(e.target.attributes[0].value)] !== 'empty_card.jpg' && (zone!=='frontrow' && zone!=='backrow')){ // add overed card in waiting room\r\n                    WaitingRoom.push(Dummy[parseInt(e.target.attributes[0].value)]);;;\r\n                }\r\n                Dummy[parseInt(e.target.attributes[0].value)] = src;\r\n                setslot_array[n](Dummy);\r\n            }\r\n            setSrc('empty_card.jpg');\r\n            setDrop(true);\r\n        }\r\n    }\r\n    const DragEnd = (e) =>{\r\n        if(drop){\r\n            if(e.target.attributes['zone'].value === 'frontrow'){\r\n                let DummyFrontRow = [...FrontRow];\r\n                DummyFrontRow[parseInt(e.target.attributes[0].value)] = swap;\r\n                setFrontRow(DummyFrontRow);\r\n            }else if(e.target.attributes['zone'].value === 'backrow'){\r\n                let DummyBackRow = [...BackRow];\r\n                DummyBackRow[parseInt(e.target.attributes[0].value)] = swap;\r\n                setBackRow(DummyBackRow);\r\n            }else if(e.target.attributes['zone'].value === 'clock'){\r\n                let DummyClock = [...Clock];\r\n                DummyClock[parseInt(e.target.attributes[0].value)] = 'empty_card.jpg';\r\n                setClock(DummyClock);\r\n            }else if(e.target.attributes['zone'].value === 'stock'){\r\n                let DummyStock = [...Stock];\r\n                DummyStock.pop();\r\n                setStock(DummyStock);\r\n            }else if(e.target.attributes['zone'].value === 'deck'){\r\n                let DummyDeck = [...Deck];\r\n                DummyDeck.pop();\r\n                setDeck(DummyDeck);\r\n            }else if(e.target.attributes['zone'].value === 'level'){\r\n                let DummyLevel = [...Level];\r\n                DummyLevel.pop();\r\n                setLevel(DummyLevel);\r\n            }else if(e.target.attributes['zone'].value === 'checkzone'){\r\n                let DummyCheckZone = [...CheckZone];\r\n                DummyCheckZone.splice(parseInt(e.target.attributes['index'].value),1);\r\n                setCheckZone(DummyCheckZone);\r\n            }else if(e.target.attributes['zone'].value === 'climaxzone'){\r\n                let DummyClimaxZone = [...ClimaxZone];\r\n                DummyClimaxZone.splice(parseInt(e.target.attributes['index'].value),1);\r\n                setClimaxZone(DummyClimaxZone);\r\n            }\r\n            else{\r\n                let DummyHand = [...Hand];\r\n                DummyHand.splice(parseInt(e.target.attributes['index'].value),1);\r\n                setHand(DummyHand);\r\n            }\r\n            setDrop(false); \r\n            setSwap('empty_card.jpg');\r\n        }\r\n    }\r\n    const ReturnToHand = (index)=>{\r\n        index = parseInt(index);\r\n        let DummyHand = [...Hand];\r\n        let DummyWaitingRoom = [...WaitingRoom];\r\n        DummyHand.push(DummyWaitingRoom[index]);\r\n        DummyWaitingRoom.splice(index,1);\r\n        setHand(DummyHand);\r\n        setWaitingRoom(DummyWaitingRoom);\r\n    }\r\n\r\n    const shuffle = (array,shuffle_array) =>{\r\n        let n = array.length;\r\n        let r = Math.floor(Math.random() * n);\r\n        if(n === 0){\r\n            return shuffle_array;\r\n        }else{\r\n            shuffle_array.push(array[r]);\r\n            array.splice(r,1);\r\n            shuffle(array,shuffle_array);\r\n        }\r\n    }\r\n\r\n    const RefreshWaitingRoom = ()=>{\r\n        console.log('refresh from Board');\r\n        let Refresh = [...Deck,...WaitingRoom];\r\n        let RefreshDeck = [];\r\n        shuffle(Refresh,RefreshDeck);\r\n        setDeck(RefreshDeck);\r\n        setWaitingRoom([]);\r\n    }\r\n\r\n    const ReturnCardInDeckToHand = (index)=>{\r\n        index = parseInt(index);\r\n        let DummyDeck = [...Deck];\r\n        let DummyHand = [...Hand];\r\n        DummyHand.push(DummyDeck[index]);\r\n        DummyDeck.splice(index,1);\r\n        setDeck(DummyDeck);\r\n        setHand(DummyHand);\r\n    }\r\n\r\n    const DeckShuffle = ()=>{\r\n        let DummyDeck = [...Deck];\r\n        let ShuffleDeck = [];\r\n        shuffle(DummyDeck,ShuffleDeck);\r\n        setDeck(ShuffleDeck);\r\n    }\r\n\r\n    return(\r\n        <Col sm={12} md={12} lg={9} style={style.Board}>\r\n            {/* opponent */}\r\n            <div className=\"container-fluid\" style={style.Field}>  \r\n                <div className=\"row\">\r\n                    {/* memory,deck and waiting room */}\r\n                    <div className=\"col-2\">\r\n                        <WaitingRoomComponent \r\n                            DragOver={DragOver} \r\n                            DragDrop={DragDrop} \r\n                            WaitingRoom ={OpponentWaitingRoom}\r\n                            role='opponent'\r\n                            ReturnToHand={ReturnToHand}\r\n                            RefreshWaitingRoom={RefreshWaitingRoom}\r\n                        />\r\n                        <DeckComponent\r\n                            Deck={OpponentDeck}\r\n                            DragStart={DragStart}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop}\r\n                            DragEnd={DragEnd}\r\n                            role='opponent'\r\n                            ReturnCardInDeckToHand={ReturnCardInDeckToHand}\r\n                            DeckShuffle={DeckShuffle}\r\n                        />\r\n                        <MemoryComponent \r\n                            role='opponent'\r\n                            Memory={OpponentMemory}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop}\r\n                        />\r\n                    </div>\r\n                    {/* main field */}\r\n                    <div className=\"col-8\">\r\n                        {/* Hand */}\r\n                        <HandComponent\r\n                            role='opponent' \r\n                            Hand={OpponentHand}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop}\r\n                            DragStart={DragStart} \r\n                            DragEnd={DragEnd}\r\n                        />\r\n                        {/* Clock */}\r\n                        <ClockComponent\r\n                            Clock={OpponentClock}\r\n                            DragStart={DragStart} \r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop} \r\n                            DragEnd={DragEnd}\r\n                        />\r\n                        {/* Backrow,CheckZone, ClimaxZone */}\r\n                        <div className=\"row justify-content-center\">\r\n                            <CheckZoneComponent\r\n                                role='opponent'\r\n                                CheckZone={OpponentCheckZone}\r\n                                DragStart={DragStart} \r\n                                DragOver={DragOver}\r\n                                DragDrop={DragDrop} \r\n                                DragEnd={DragEnd}\r\n                            />\r\n                            <BackRowComponent\r\n                                BackRow={OpponentBackRow}\r\n                                DragStart={DragStart} \r\n                                DragOver={DragOver}\r\n                                DragDrop={DragDrop} \r\n                                DragEnd={DragEnd}\r\n                            />\r\n                            <ClimaxZoneComponent\r\n                                role='opponent'\r\n                                ClimaxZone={OpponentClimaxZone}\r\n                                DragStart={DragStart} \r\n                                DragOver={DragOver}\r\n                                DragDrop={DragDrop} \r\n                                DragEnd={DragEnd}\r\n                            />\r\n                        </div>\r\n                        {/* FrontRow */}\r\n                        <FrontRowComponet\r\n                            FrontRow={OpponentFrontRow}\r\n                            DragStart={DragStart}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop} \r\n                            DragEnd={DragEnd}\r\n                            HandleCardOver={props.HandleCardOver}\r\n                        />\r\n                    </div>\r\n                    {/* stock and level */}\r\n                    <div className=\"col-2\">\r\n                        {/* level */}\r\n                        <LevelComponent\r\n                            role='opponent'\r\n                            Level={OpponentLevel}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop}\r\n                            DragStart={DragStart}\r\n                            DragEnd={DragEnd}\r\n                        />\r\n                        {/* stock */}\r\n                        <StockComponent\r\n                            role='opponent'\r\n                            Stock={OpponentStock}\r\n                            DragStart={DragStart}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop} \r\n                            DragEnd={DragEnd}\r\n                        />\r\n                    </div>\r\n                </div>         \r\n            </div>\r\n            {/* player */}\r\n            <div className=\"container-fluid\" style={style.Field}>\r\n                <div className=\"row\">\r\n                    {/* stock and level */}\r\n                    <div className=\"col-2\">\r\n                        {/* stock */}\r\n                        <StockComponent\r\n                            role='player'\r\n                            Stock={Stock}\r\n                            DragStart={DragStart}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop} \r\n                            DragEnd={DragEnd}\r\n                        />\r\n                        {/* level */}\r\n                        <LevelComponent\r\n                            role='player'\r\n                            Level={Level}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop}\r\n                            DragStart={DragStart}\r\n                            DragEnd={DragEnd}\r\n                        />\r\n                    </div>\r\n                    {/* main field */}\r\n                    <div className=\"col-8\">\r\n                        {/* FrontRow */}\r\n                        <FrontRowComponet\r\n                            FrontRow={FrontRow}\r\n                            DragStart={DragStart}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop} \r\n                            DragEnd={DragEnd}\r\n                            HandleCardOver={props.HandleCardOver}\r\n                        />\r\n                        {/* Backrow,CheckZone, ClimaxZone */}\r\n                        <div className=\"row justify-content-center\">\r\n                            <ClimaxZoneComponent\r\n                                role='player'\r\n                                ClimaxZone={ClimaxZone}\r\n                                DragStart={DragStart} \r\n                                DragOver={DragOver}\r\n                                DragDrop={DragDrop} \r\n                                DragEnd={DragEnd}\r\n                            />\r\n                            <BackRowComponent\r\n                                BackRow={BackRow}\r\n                                DragStart={DragStart} \r\n                                DragOver={DragOver}\r\n                                DragDrop={DragDrop} \r\n                                DragEnd={DragEnd}\r\n                            />\r\n                            <CheckZoneComponent\r\n                                role='player'\r\n                                CheckZone={CheckZone}\r\n                                DragStart={DragStart} \r\n                                DragOver={DragOver}\r\n                                DragDrop={DragDrop} \r\n                                DragEnd={DragEnd}\r\n                            />\r\n                        </div>\r\n                        {/* Clock */}\r\n                        <ClockComponent\r\n                            Clock={Clock}\r\n                            DragStart={DragStart} \r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop} \r\n                            DragEnd={DragEnd}\r\n                        />\r\n                        {/* Hand */}\r\n                        <HandComponent \r\n                            role='player'\r\n                            Hand={Hand}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop}\r\n                            DragStart={DragStart} \r\n                            DragEnd={DragEnd}\r\n                        />\r\n                    </div>\r\n                    {/* memory,deck and waiting room */}\r\n                    <div className=\"col-2\"> \r\n                        <MemoryComponent\r\n                            role='player' \r\n                            Memory={Memory}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop}\r\n                        />\r\n                        <DeckComponent\r\n                            Deck={Deck}\r\n                            DragStart={DragStart}\r\n                            DragOver={DragOver}\r\n                            DragDrop={DragDrop}\r\n                            DragEnd={DragEnd}\r\n                            role='player'\r\n                            ReturnCardInDeckToHand={ReturnCardInDeckToHand}\r\n                            DeckShuffle={DeckShuffle}\r\n                        />\r\n                        <WaitingRoomComponent\r\n                            DragOver={DragOver} \r\n                            DragDrop={DragDrop} \r\n                            WaitingRoom ={WaitingRoom}\r\n                            role='player'\r\n                            ReturnToHand={ReturnToHand}\r\n                            RefreshWaitingRoom={RefreshWaitingRoom}\r\n                        />\r\n                    </div>\r\n                </div>           \r\n            </div>\r\n        </Col>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Board","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\firebase.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\CardInfo.js",["181"],"import React,{useState,useEffect} from 'react';\r\nimport { Col, Card, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n//css\r\nimport style from '../style/CardInfoStyle';\r\n\r\nfunction CardInfo(props){\r\n\r\n    const [text, setText] = useState([]) \r\n    \r\n    // useEffect(()=>{\r\n    //     let cardtext = props.text.filter(item=>item.url === props.image)\r\n    //     if(cardtext.length > 0)\r\n    //         Settext(cardtext[0].text)\r\n    // },[props.text,props.image])\r\n    useEffect(() => {\r\n        let url = props.image;\r\n        let cardText = (props.userDeck).find(item => item.url === url);\r\n        //console.log(cardText);\r\n        if(cardText !== undefined)\r\n            setText(cardText.text);\r\n    }, [props.image]);\r\n\r\n    return(\r\n        // <div className=\"col-lg-3 col-md-2 col-sm-12\" style={{float:\"left\"}}>\r\n        //     {/* card image */}\r\n        //     <div className=\"card\" style={{width:\"16rem\"}}>\r\n        //         <img src={props.image} className=\"card-img-top\" alt=\"...\"/>\r\n        //     </div>\r\n        //     {/* card text */}\r\n        //     <div className=\"mt-3\" style={style.cardtext} >\r\n        //         {\r\n        //             text.map((item,i)=><p key={i} style={{padding:'10px'}}>{item}</p>)\r\n        //         }\r\n        //     </div>\r\n        //     <Link to=\"/\">\r\n        //         <button onClick={props.handleExitGame} style={{width:'16rem', marginTop:'16%'}}>ออกจากเกม</button>\r\n        //     </Link>\r\n        // </div>\r\n        <Col sm={12} md={2} lg={3}>\r\n             {/* card image */}\r\n            <Card style={{ width:'16rem' }}>\r\n                <Card.Img variant=\"top\" src={props.image} />\r\n            </Card>\r\n            {/* card text */}\r\n            <div className=\"mt-3\" style={style.cardtext} >\r\n                {text.map((item,i)=><p key={i} style={{padding:'10px'}}>{item}</p>)}\r\n            </div>\r\n            {/* exit game */}\r\n            <Link to=\"/\">\r\n                <Button variant=\"danger\" onClick={props.handleExitGame} style={{width:'16rem', marginTop:'16%'}}>ออกจากเกม</Button>\r\n            </Link>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default CardInfo","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\style\\BoardStyle.js",["182"],"const style = {\r\n    CardStyle :{\r\n        width:\"3rem\",\r\n        padding:\"0px\",\r\n        marginTop:\"10px\",\r\n        opacity:\"1.0\",\r\n        border:\"1px solid black\",\r\n        borderRadius: \"5px\",\r\n        marginLeft:\"10px\",\r\n        cursor: \"pointer\"\r\n    },\r\n    EmptycardStyle :{\r\n        opacity:\"0.5\",\r\n        cursor:\"auto\",\r\n    },\r\n    ClockStyle :{\r\n        marginLeft:\"0px\"\r\n    },\r\n    HandStyle :{\r\n        width:\"90%\",\r\n        marginLeft:\"auto\",\r\n        marginRight:\"auto\",\r\n        height:\"5rem\",\r\n        backgroundColor:\"rgba(255, 255, 255, 0.3)\",\r\n        border:\"1px solid black\",\r\n        borderRadius:\"10px\",\r\n        marginTop:\"10px\",\r\n        marginBottom:\"10px\"\r\n    },\r\n    Field :{\r\n        borderRadius:'25px',\r\n        border:'1px solid black',\r\n        marginBottom:'10px',\r\n        marginTop:'10px'\r\n    },\r\n    Stock :{\r\n        width:'5rem',\r\n        height:'10rem',\r\n        backgroundColor:'rgba(255, 255, 255, 0.3)',\r\n        borderRadius:'10px',\r\n        border:'1px solid black',\r\n        marginTop:'10px',\r\n        marginLeft:'auto',\r\n        marginRight:'auto',\r\n        textAlign:'center',\r\n        position:'relative'\r\n    },\r\n    TapCard :{\r\n        width:'3rem',\r\n        border:'1px solid black',\r\n        borderRadius: '5px',\r\n        transform: 'rotate(90deg)',\r\n        position:'absolute',\r\n        right:'20%',\r\n        cursor: 'pointer'\r\n    },\r\n    TapCardLeft :{\r\n        transform: 'rotate(270deg)'\r\n    },\r\n    UntapCard :{\r\n        width:'3rem',\r\n        border:'1px solid black',\r\n        borderRadius: '5px',\r\n        position:'absolute',\r\n        right:'20%',\r\n        cursor: 'pointer'\r\n    },\r\n    Zone :{\r\n        width:'5rem',\r\n        height:'6rem',\r\n        backgroundColor:'rgba(255, 255, 255, 0.3)',\r\n        borderRadius:'10px',\r\n        border:'1px solid black',\r\n        marginTop:'10px',\r\n        marginLeft:'auto',\r\n        marginRight:'auto',\r\n        textAlign:'center',\r\n        position:'relative'\r\n    },\r\n    Board: {\r\n        backgroundImage:\"url(\" + (process.env.PUBLIC_URL + '/okayu.png') + \")\",\r\n    }\r\n}\r\n\r\nexport default style","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Root.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Child.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\WaitingRoom.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Deck.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Memory.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Hand.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Clock.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\FrontRow.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\BackRow.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Level.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Stock.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\CheckZone.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ClimaxZone.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\LogIn.js",["183"],"import React,{useState} from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\nimport ResetPassword from './ResetPassword';\r\n\r\nfunction LogIn(props){\r\n\r\n    const [username,Setusername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const HandleusernameChanged = (e)=>{\r\n        Setusername(e.target.value)\r\n    }\r\n    const handlePasswordChanged = (e) => {\r\n        setPassword(e.target.value)\r\n    }\r\n    const Submit = async (e)=>{\r\n        e.preventDefault()\r\n        axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/signIn/',{\r\n            username:username,\r\n            password:password\r\n        }).then((response) => {\r\n            console.log(response.data);\r\n            if(response.data.status === 'success'){\r\n                localStorage.setItem('token', response.data.token);\r\n                props.setIsLoggedIn(true);\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n    return(\r\n        <>\r\n            {/* logo */}\r\n            <div className=\"row justify-content-center\">\r\n                <img \r\n                    src=\"weiss_schwarz_logo.jpg\"\r\n                    alt=\"...\"\r\n                    style={{\r\n                        width:'40rem'\r\n                    }}\r\n                />\r\n            </div>\r\n            {/* form */}\r\n            <div className=\"row ms-2 me-2 justify-content-center\">\r\n                <div className=\"col-lg-4 col-md-6 col-sm-12 mt-5 shadow-lg bg-white rounded\" >\r\n                    <div className=\"mb-3 mt-3 ms-5 me-5\">\r\n                        <label htmlFor=\"username\" className=\"form-label\">username</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            id=\"username\" \r\n                            placeholder=\"Input your uername\" \r\n                            value={username} \r\n                            onChange={HandleusernameChanged}\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-3 mt-3 ms-5 me-5\">\r\n                        <label htmlFor=\"password\" className=\"form-label\">password</label>\r\n                        <input \r\n                            type=\"password\" \r\n                            className=\"form-control\" \r\n                            id=\"password\" \r\n                            placeholder=\"Input your password\"\r\n                            value={password}\r\n                            onChange={handlePasswordChanged} \r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <button \r\n                            className=\"btn btn-primary\"\r\n                            type=\"button\" \r\n                            onClick={Submit}\r\n                            style={{\r\n                                width:'80%',\r\n                                marginLeft:'10%',\r\n                                marginRight:'10%',\r\n                                marginTop:'10px',\r\n                                marginBottom:'25px',\r\n                            }}\r\n                        >\r\n                            Sign In\r\n                        </button>\r\n                    </div>        \r\n                </div>\r\n            </div>\r\n            {/* forget password & register */}\r\n            <div className=\"row justify-content-center\">\r\n                <div \r\n                    className=\"col-lg-4 col-md-6 col-sm-12\"\r\n                    style={{\r\n                        textAlign:'right',\r\n                        marginTop:'15px'\r\n                    }}\r\n                >\r\n                    <span style={{cursor:'pointer'}} >\r\n                        <Link to=\"/resetpassword\"> ลืมรหัสผ่าน ? </Link>\r\n                    </span> \r\n                    |\r\n                    <span style={{cursor:'pointer'}}>\r\n                        {' '}<Link to=\"/register\">สม้ครสมาชิก</Link>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LogIn","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\style\\CardInfoStyle.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\style\\AppStyle.js",[],["184","185"],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Register.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Profile.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\reducer\\index.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\reducer\\FrontRowReducer.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ViewDeck.js",["186"],"import React, {useState, useEffect} from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Button, Card, Row, Col, Container} from 'react-bootstrap'; \r\nimport Modal from './Modal';\r\n\r\nfunction ViewDeck(){\r\n    \r\n    const { deckId } = useParams();\r\n    const [deck, setDeck] = useState([]);\r\n    const [deckName, setDeckName] = useState('');\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalItem, setModalItem] = useState({});\r\n\r\n    const showCard = (card) => {\r\n        const characterOrder = [ 'name', 'CardId', 'color', 'level', 'cost', 'power', 'soul', 'trigger', 'CardType', 'CharacterType', 'cardUrl', 'text' ];\r\n        const climaxOrder = [ 'name', 'CardId','color', 'trigger', 'CardType', 'cardUrl', 'text' ];\r\n        const eventOrder = [ 'level', 'cost', 'name', 'CardId','color', 'trigger', 'CardType', 'cardUrl', 'text' ];\r\n        const tableItem = {};\r\n        if(card.CardType === 'character'){\r\n            characterOrder.forEach(key => {\r\n                tableItem[key] = card[key];\r\n            });\r\n        }else if(card.CardType === 'event'){\r\n            eventOrder.forEach(key => {\r\n                tableItem[key] = card[key];\r\n            })\r\n        }else{\r\n            climaxOrder.forEach(key => {\r\n                tableItem[key] = card[key];\r\n            })\r\n        }\r\n        setModalItem(tableItem);\r\n        setShowModal(true);\r\n    }\r\n\r\n    const handleModalClosed = () => {\r\n        setShowModal(false);\r\n    }\r\n\r\n    const handleIncreaseCardClicked = async (cardId) => {\r\n        try {\r\n            //เพิ่มจำนวนการ์ดใน database\r\n            let response =  await axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/deck/addCard/', {\r\n                deckId:deckId,\r\n                cardId:cardId\r\n            })\r\n            console.log(response.data);\r\n            //แสดงจำนวนการ์ดที่เพิ่มในหน้า frontend\r\n            let dummyDeck = [...deck];\r\n            for(let i = 0; i < dummyDeck.length; i++){\r\n                if(dummyDeck[i].CardId === cardId){\r\n                    dummyDeck[i].count++;\r\n                }\r\n            }\r\n            setDeck(dummyDeck);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    const handleDecreaseCardClicked = async (cardId) => {\r\n        try {\r\n            //ลดจำนวนการ์ดใน database\r\n            let response =  await axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/deck/deleteCard/', {\r\n                deckId:deckId,\r\n                cardId:cardId\r\n            })\r\n            console.log(response.data);\r\n            //แสดงจำนวนการ์ดที่เพิ่มในหน้า frontend\r\n            let dummyDeck = [...deck];\r\n            for(let i = 0; i < dummyDeck.length; i++){\r\n                if(dummyDeck[i].CardId === cardId){\r\n                    dummyDeck[i].count--;\r\n                }\r\n            }\r\n            setDeck(dummyDeck);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function loadDeckById(deckId){\r\n            try {\r\n                let deckResponse  = await axios.get('http://localhost:5000/weissschwarz-f48e0/us-central1/app/deck/getDeckByDeckId/' + deckId);\r\n                console.log(deckResponse.data);\r\n                setDeckName(deckResponse.data.deck.DeckName);\r\n                if(deckResponse.data.status === 'success'){\r\n                    let cardIds = deckResponse.data.deck.CardIdList;\r\n                    //get card data by cardId\r\n                    let cardResponse = await axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/card/getCardByMultipleCardId', { cardIds })\r\n                    console.log(cardResponse);\r\n                    cardResponse.data.status === 'success' ? setDeck(cardResponse.data.cardData) : setDeck([]);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                throw error;\r\n            }\r\n            \r\n        }\r\n        loadDeckById(deckId);\r\n    }, []);\r\n   \r\n    return(\r\n        <>\r\n            <Container>\r\n                <Row style={{marginTop:'50px'}}>\r\n                    <Col lg={12}><h1>{deckName}</h1></Col>\r\n                    <Col><hr /></Col>\r\n                </Row>\r\n                <Row>\r\n                    {deck.map((item, index) => (\r\n                        //ไม่แสดงการ์ดที่มี 0 ใบหรือน้อยกว่า\r\n                        item.count !== 0 &&\r\n                        <Col xs={6} md={3} lg={2} key={index}>\r\n                            <Card\r\n                                key={index}\r\n                                style={{ \r\n                                    marginTop:'20px', \r\n                                }}\r\n                            >\r\n                                <Card.Img \r\n                                    variant=\"top\" \r\n                                    src={item.cardUrl}\r\n                                    onClick={() => {showCard(item)}}\r\n                                    style={{ cursor:'pointer', }} \r\n                                />\r\n                                <p\r\n                                    style={{\r\n                                        position:'absolute',\r\n                                        right:'0',\r\n                                        top:'0',\r\n                                        marginBottom:'0',\r\n                                        backgroundColor:'black',\r\n                                        color:'white',\r\n                                        padding:'5%',\r\n                                        opacity:'0.8',\r\n                                    }}\r\n                                >\r\n                                    x {item.count}\r\n                                </p>\r\n                                <Card.Text style={{textAlign:'center'}}>\r\n                                    <Button \r\n                                        style={{\r\n                                            float:'left', \r\n                                            margin:'5px 0px'\r\n                                        }}\r\n                                        onClick={() => {handleDecreaseCardClicked(item.CardId)}}\r\n                                    >\r\n                                        -\r\n                                    </Button>\r\n                                    {item.count}/4\r\n                                    <Button \r\n                                        style={{\r\n                                            float:'right', \r\n                                            margin:'5px 0px'\r\n                                        }}\r\n                                        onClick={() => {handleIncreaseCardClicked(item.CardId)}}\r\n                                    >\r\n                                        +\r\n                                    </Button>\r\n                                </Card.Text>\r\n                            </Card>\r\n                        </Col>\r\n                    ))}\r\n                    {/* New Deck */}\r\n                    <Col xs={6} md={3} lg={2}>\r\n                        {/* View card in this series */}\r\n                        <Link \r\n                            to={'/MyDeck/' + deckId + '/Aobuta/addCard'}\r\n                            style={{\r\n                                color:'black',\r\n                                textDecoration:'none',\r\n                                textAlign:'center',\r\n                            }}\r\n                        >\r\n                            <Card\r\n                                style={{ \r\n                                    cursor:'pointer',\r\n                                    marginTop:'20px', \r\n                                    border:'none',\r\n                                }}\r\n                            >\r\n                                <Card.Img variant=\"top\" src={process.env.PUBLIC_URL + '/new_deck.PNG'} />\r\n                                <Card.Text>+ Add Card</Card.Text>\r\n                            </Card>\r\n                        </Link>\r\n                    </Col>\r\n                </Row>   \r\n            </Container>\r\n            {/* Modal */}\r\n            <Modal \r\n                showModal={showModal} \r\n                modalItem={modalItem} \r\n                handleModalClosed={handleModalClosed}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ViewDeck;","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\RegisterStatus.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ResetPassword.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ResetPasswordStatus.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Navbar.js",[],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\ViewCard.js",["187","188","189"],"C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Series.js",["190","191"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NewDeck(){\r\n\r\n    const [allCardSeries, setAllCardSeries] = useState([]);\r\n    const [allSeries, setAllSeries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:5000/weissschwarz-f48e0/us-central1/app/series/getAllSeries')\r\n        .then((response) => {\r\n            setAllSeries(response.data.series);\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }, [])\r\n\r\n    return(\r\n        <>\r\n            <Container>\r\n                <Row style={{marginTop:'2%'}}>\r\n                    {/* Display all series */}\r\n                    {allSeries.map((value, index) => (\r\n                        <Col key={index}>\r\n                            <Link to={'Series/' + value.seriesName}>\r\n                                <img \r\n                                    src={value.seriesImage} \r\n                                    style={{ width:'18rem' }} \r\n                                    alt=\"...\"\r\n                                />\r\n                            </Link>\r\n                            <p>{value.seriesName}</p>\r\n                        </Col>\r\n                    ))\r\n                    }\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewDeck;","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\MyDeck.js",["192"],"import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Card, Col, Container} from 'react-bootstrap';\r\nimport AddDeck from './AddDeck';\r\n\r\nexport default (props) => {\r\n\r\n    const [addDeck, setAddDeck] = useState(false);\r\n    \r\n    const handleAddDeckClicked = () => {\r\n        setAddDeck(!addDeck);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Container fluid>\r\n                {!addDeck &&\r\n                    <Row \r\n                        style={{\r\n                            marginTop:'25px',\r\n                            marginLeft:'10%',\r\n                        }}\r\n                    >\r\n                        {props.myDeck.map((item, index) =>\r\n                            <Col xs={6} md={3} lg={2} key={index}>\r\n                                <Card \r\n                                    style={{ \r\n                                        border:'none',\r\n                                    }}\r\n                                >\r\n                                    <Link to={'/MyDeck/' + item.DeckId}>\r\n                                        <Card.Img variant=\"top\" src={item.DeckImage}/>\r\n                                    </Link>\r\n                                    <Card.Body >\r\n                                        <Card.Title style={{textAlign:'center'}}>{item.DeckName}</Card.Title>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        )}\r\n                        <Col xs={6} md={3} lg={2}>\r\n                                <Card \r\n                                    style={{ \r\n                                        border:'none',\r\n                                        cursor:'pointer',\r\n                                    }}\r\n                                    onClick={handleAddDeckClicked}\r\n                                >\r\n                                    <Card.Img variant=\"top\" src={process.env.PUBLIC_URL + '/new_deck.PNG'}/>\r\n                                    <Card.Body >\r\n                                        <Card.Title style={{textAlign:'center'}}>+ New Deck</Card.Title>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                {addDeck &&\r\n                    <Row \r\n                        className=\"justify-content-center\"\r\n                        style={{\r\n                            marginTop:'2%',\r\n                        }}\r\n                    >\r\n                        <AddDeck handleAddDeckClicked={handleAddDeckClicked}/>\r\n                    </Row>\r\n                }\r\n            </Container>\r\n        </>\r\n    )\r\n};","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Modal.js",["193"],"import React from 'react';\r\nimport { Modal, Button, Row, Col, Container, Table} from 'react-bootstrap';\r\n\r\nexport default (props) =>{\r\n\r\n    return(\r\n        <>\r\n            <Modal \r\n                show={props.showModal} \r\n                aria-labelledby=\"contained-modal-title-vcenter\" \r\n                onHide={props.handleModalClosed}\r\n                size=\"lg\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        {props.modalItem.CardId} {props.modalItem.name}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className=\"show-grid\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs={12} md={12} lg={6}>\r\n                                <img style={{width:'16rem'}} src={props.modalItem.cardUrl} alt=\"...\"/>\r\n                            </Col>\r\n                            <Col xs={12} md={12} lg={6}>\r\n                                <Table striped bordered hover responsive>\r\n                                    <tbody>\r\n                                        {Object.keys(props.modalItem).map((prop, index) =>(\r\n                                            prop !== 'cardUrl' && prop !== 'name' && prop !== 'CardId' && prop !== 'text' &&\r\n                                            <tr key={index}>\r\n                                                <td>{prop}</td>\r\n                                                <td>{props.modalItem[prop]}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                        <Row>\r\n                            <Col>\r\n                                <h2>text : </h2>\r\n                                {Array.isArray(props.modalItem['text']) &&\r\n                                    props.modalItem['text'].map((value, index) => (\r\n                                        <p key={index}>{value}</p>\r\n                                ))}\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {props.deckId !== undefined &&\r\n                            <Row className=\"justify-content-center\">\r\n                                <Col xs={6} md={4} lg={6}>\r\n                                    <Button \r\n                                        variant=\"danger\" \r\n                                        style={{\r\n                                            width:'100%', \r\n                                            marginTop:'20px'\r\n                                        }}\r\n                                        onClick={() => {props.addCardToDeck(props.modalItem)}}\r\n                                    >\r\n                                        เพิ่มลงเด็ค\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        }\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.handleModalClosed}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n};\r\n\r\n","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\AddDeck.js",["194"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Form,\r\n    Button,\r\n    Col\r\n} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nexport default (props) => {\r\n\r\n    const [series, setSeries] = useState(['hello']);\r\n    const [seriesSelected, setSeriesSelected] = useState('');\r\n    const [deckName, setDeckName] = useState('');\r\n    const handleSeriesSelected = (e) => {\r\n        setSeriesSelected(e.target.value);\r\n    }\r\n    const handleDeckNameChanged = (e) => {\r\n        setDeckName(e.target.value);\r\n    }\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if(deckName === '' || seriesSelected === ''){\r\n            alert('กรุณากรอกข้อมูลให้ครบถ้วน');\r\n        }else{\r\n            try {\r\n                let token = localStorage.getItem('token');\r\n                let data = {\r\n                    deckName:deckName,\r\n                    seriesName:seriesSelected\r\n                }\r\n                let response = await axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/deck/addDeck', data, {\r\n                    headers:{\r\n                        'Access-Control-Allow-Origin':'*',\r\n                        'Authorization': 'Bearer ' + token  \r\n                    }\r\n                })\r\n                console.log(response.data);\r\n            } catch (error) {\r\n                console.log(error);\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:5000/weissschwarz-f48e0/us-central1/app/series/getAllSeries/')\r\n        .then((response) => {\r\n            let series = (response.data.series).map(item => item.seriesName);\r\n            console.log(series);\r\n            setSeries(series);\r\n            setSeriesSelected(series[0]);\r\n        }).catch((error) => {\r\n            console.log(error);\r\n            throw error;\r\n        })\r\n    }, [])\r\n\r\n    return(\r\n        <>\r\n            <Col xs={12} sm={12} md={12} lg={12}>  \r\n                <Button variant=\"danger\" onClick={props.handleAddDeckClicked}> \r\n                    <img \r\n                        src={process.env.PUBLIC_URL + '/back-button-3.svg'}\r\n                        style={{\r\n                            width:'1rem',\r\n                            marginRight:'1rem'\r\n                        }} \r\n                        alt=\"...\"\r\n                    />\r\n                    กลับไปหน้า deck\r\n                </Button>\r\n            </Col>\r\n            <Col xs={12} sm={6} md={6} lg={4}>\r\n                <Form onSubmit={handleFormSubmit} style={{marginTop:'20%'}}>\r\n                    <Form.Group controlId=\"formSelectSeries\">\r\n                        <Form.Label>Series</Form.Label>\r\n                        <Form.Control as=\"select\" value={seriesSelected} onChange={handleSeriesSelected}>\r\n                            {series.map((value, index) => (\r\n                                <option key={index}>{value}</option>\r\n                            ))}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formEnterDeckName\">\r\n                        <Form.Label>Deck Name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter your deck name\" onChange={handleDeckNameChanged}/>\r\n                        <Form.Text className=\"text-muted\">\r\n                            Please give your deck a unique name.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                 \r\n                    <Button \r\n                        variant=\"danger\" \r\n                        type=\"submit\" \r\n                        style={{\r\n                            width:'60%',\r\n                            marginLeft:'20%',\r\n                            marginRight:'20%',\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Form>\r\n            </Col>\r\n        </>\r\n    )\r\n};\r\n","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Play.js",["195","196","197"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Table,\r\n    Button,\r\n    Card,\r\n} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport firebase from '../firebase';\r\n\r\nexport default (props) => {\r\n\r\n    const db = firebase.firestore();\r\n    const [invite, setInvite] = useState(false);\r\n    const [friends, setFriends] = useState([]);\r\n    const [myInviteId, setMyInviteId] = useState('');\r\n    const [ready, setReady] = useState(false);\r\n    const [myDeck, setMyDeck] = useState([]);\r\n    const [deckSelected, setDeckSelected] = useState({});\r\n\r\n    const handleInviteClicked = async (friend) =>{\r\n        setInvite(true);\r\n        try {\r\n            let token = localStorage.getItem('token');\r\n            let response = await axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/invite/addInvite', \r\n                { friendId:friend.friendId }, \r\n                {\r\n                    headers:{\r\n                        'Access-Control-Allow-Origin':'*',\r\n                        'Authorization': 'Bearer ' + token  \r\n                    }\r\n                });\r\n            console.log(response.data);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    const handleCancleInvite = async () => {\r\n        setInvite(false);\r\n        try {\r\n            let response = await axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/invite/deleteInvite', {\r\n                userId:myInviteId,\r\n            });\r\n            console.log(response.data);\r\n            setReady(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const getMyDeck = async() =>{\r\n        let token = localStorage.getItem('token');\r\n        try {\r\n            let response = await axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/deck/getDeck',{}, {\r\n                headers:{\r\n                    'Access-Control-Allow-Origin':'*',\r\n                    'Authorization': 'Bearer ' + token  \r\n                }\r\n            })\r\n            console.log(response.data);\r\n            setMyDeck(response.data.deck);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;      \r\n        }\r\n    };\r\n\r\n    const handleDeckSelected = (deck) =>{\r\n        setDeckSelected(deck);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let token = localStorage.getItem('token');\r\n        axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/user/getFriendsByUserId', {}, {\r\n            headers:{\r\n                'Access-Control-Allow-Origin':'*',\r\n                'Authorization': 'Bearer ' + token  \r\n            }\r\n        }).then((response) => {\r\n            setMyInviteId(response.data.userId);\r\n            if(response.data.status === 'success'){\r\n                let friends = response.data.friends;\r\n                db.collection('signIn').onSnapshot((snapShot) => {\r\n                    snapShot.forEach((doc) => {\r\n                        for(let i = 0; i < friends.length; i++){\r\n                            if(friends[i]['friendId'] === doc.id){\r\n                                friends[i]['status'] = doc.data()['status'];\r\n                            }\r\n                        }\r\n                        // console.log(friends);\r\n                        setFriends([...friends]);\r\n                    })\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            console.log(error);\r\n            throw error;\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        db.collection('invite').onSnapshot((snapShot) => {\r\n            snapShot.forEach((doc) => {\r\n                if(doc.id === myInviteId){\r\n                    if(doc.data().status === 'accepted'){\r\n                        setReady(true);\r\n                        getMyDeck();\r\n                    }else if(doc.data().status === 'waiting'){\r\n                        setInvite(true);\r\n                        setReady(false);\r\n                        setMyDeck([]);\r\n                    }\r\n                }\r\n                //console.log('looking for invite collection realtime');\r\n            })\r\n        })\r\n    }, [myInviteId]);\r\n\r\n    return(\r\n        <>\r\n            <Container>\r\n                {!invite &&\r\n                    <>\r\n                        <Row style={{ margin:'2% 0%'}}>\r\n                            <Col>\r\n                                <h1>เชิญคู่แข่ง</h1>\r\n                            </Col>\r\n                        </Row> \r\n                        <Row>\r\n                            <Col>\r\n                            <Table responsive>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>#</th>\r\n                                        <th>Name</th>\r\n                                        <th>Status</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {friends.map((value, index) => (\r\n                                        <tr key={index}>\r\n                                            <td>{index + 1}</td>\r\n                                            <td>{value.username}</td>\r\n                                            <td>\r\n                                                {value.status}\r\n                                                {value.status === 'online' &&\r\n                                                    <Button \r\n                                                        variant=\"outline-success\"\r\n                                                        onClick={() => {handleInviteClicked(value)}}\r\n                                                        style={{\r\n                                                            marginLeft:'10%'\r\n                                                        }}\r\n                                                    >\r\n                                                        เชิญ\r\n                                                    </Button>\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                                </Table>\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n                }\r\n                {/* waiting for accept invited */}\r\n                {invite && !ready &&\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col xs={12} md={12} lg={12}>\r\n                            <h1 style={{textAlign:'center'}}>กำลังรอการตอบรับ...</h1>\r\n                        </Col>\r\n                        <Col xs={6} md={3} lg={2}>\r\n                            <Button \r\n                                variant=\"danger\"\r\n                                onClick={handleCancleInvite}\r\n                            >\r\n                                ยกเลิกคำขอ\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                {/* show deck after accepted invited */}\r\n                <Row style={{marginTop:'2%'}}>\r\n                    {ready && Object.keys(deckSelected).length === 0 &&\r\n                        myDeck.map((item, index) =>\r\n                            <Col xs={6} md={3} lg={2} key={index}>\r\n                                <Card \r\n                                    style={{ \r\n                                        border:'none',\r\n                                        cursor:'pointer'\r\n                                    }}\r\n                                    onClick={() => {handleDeckSelected(item)}}\r\n                                >\r\n                                    <Card.Img variant=\"top\" src={item.DeckImage}/>\r\n                                    <Card.Body >\r\n                                        <Card.Title style={{textAlign:'center'}}>{item.DeckName}</Card.Title>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    }\r\n                </Row>\r\n                {/* show deck selected after select deck */}\r\n                {Object.keys(deckSelected).length !== 0 &&\r\n                    <>\r\n                        <Row className=\"justify-content-center\">\r\n                            <Col xs={6} sm={6} md={3} lg={3}>\r\n                                <Card \r\n                                    style={{ \r\n                                        border:'none',\r\n                                    }}\r\n                                >\r\n                                    <Card.Img variant=\"top\" src={deckSelected.DeckImage}/>\r\n                                    <Card.Body >\r\n                                        <Card.Title style={{textAlign:'center'}}>{deckSelected.DeckName}</Card.Title>\r\n                                        <Button \r\n                                            style={{ width:'100%' }} \r\n                                            onClick={() => {props.handleReadyPlay(deckSelected.DeckId)}}\r\n                                        >\r\n                                            Let's Play !\r\n                                        </Button>\r\n                                        <Button variant=\"danger\" style={{ width:'100%', marginTop:'4%' }}>เลือกเด็คใหม่</Button>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n                }\r\n            </Container>\r\n        </>\r\n    )\r\n};","C:\\Users\\acer\\Desktop\\Weiss schwarz\\frontend\\src\\component\\Invited.js",["198","199"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Table,\r\n    Button,\r\n    Card\r\n} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport firebase from '../firebase';\r\n\r\nexport default (props) => {\r\n\r\n    const db = firebase.firestore();\r\n    const [invited, setInvited] = useState([]);\r\n    const [userId, setUserId] = useState('');\r\n    const [inviteId, setInviteId] = useState('');\r\n    const [acceptInvited, setAcceptedInvited] = useState(false);\r\n    const [myDeck, setMyDeck] = useState([]);\r\n    const [deckSelected, setDeckselected] = useState({});\r\n\r\n\r\n    const handleInvitedAccepted = async (invite) => {\r\n        setInviteId(invite.invite);\r\n        //load user deck \r\n        let token = localStorage.getItem('token');\r\n        try {\r\n            let response = await axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/invite//acceptedInvited',\r\n            { inviteId:invite.invite }, \r\n            {\r\n                headers:{\r\n                    'Access-Control-Allow-Origin':'*',\r\n                    'Authorization': 'Bearer ' + token  \r\n                }\r\n            });\r\n            //console.log(response);\r\n            setMyDeck(response.data.deck);\r\n            setAcceptedInvited(true);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    const handleDeckSelected = (deck) =>{\r\n        setDeckselected(deck);\r\n    }\r\n\r\n    //load invite by userId\r\n    useEffect(() => {\r\n        let token = localStorage.getItem('token');\r\n        axios.post('http://localhost:5000/weissschwarz-f48e0/us-central1/app/invite/getInvite', {}, {\r\n            headers:{\r\n                'Access-Control-Allow-Origin':'*',\r\n                'Authorization': 'Bearer ' + token  \r\n            }\r\n        }).then((response) => {\r\n            if(response.data.status === 'success'){\r\n                setUserId(response.data.userId);\r\n                setInvited(response.data.invite);\r\n            }\r\n        }).catch((error) => {\r\n            console.log(error);\r\n            throw error;\r\n        })\r\n    }, []);\r\n\r\n    //looking invited realtime\r\n    useEffect(() => {\r\n        db.collection('invite').onSnapshot((snapShot) => {\r\n            let dummy = [];\r\n            snapShot.forEach((doc) => {\r\n                if(doc.data().invited === userId){\r\n                    console.log(doc.data());\r\n                    dummy.push(doc.data());\r\n                }\r\n            })\r\n            setInvited(dummy);\r\n            console.log('looking for invited collection realtime');\r\n        })\r\n    }, [userId]);\r\n\r\n    return(\r\n        <>\r\n            <Container>\r\n                {!acceptInvited &&\r\n                    <>\r\n                        <Row style={{ margin:'2% 0%'}}>\r\n                            <Col>\r\n                                <h1>คำเชิญ</h1>\r\n                            </Col>\r\n                        </Row> \r\n                        <Row>\r\n                            <Col>\r\n                                <Table responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>#</th>\r\n                                            <th>Name</th>\r\n                                            <th></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {invited.map((value, index) => (\r\n                                            <tr key={index}>\r\n                                                <td>{index + 1}</td>\r\n                                                <td>{value.inviteName}</td>\r\n                                                <td>\r\n                                                    <Button \r\n                                                        variant=\"outline-danger\"\r\n                                                        onClick={() => {handleInvitedAccepted(value)}}\r\n                                                        style={{\r\n                                                            marginLeft:'10%'\r\n                                                        }}\r\n                                                    >\r\n                                                        ตอบรับ\r\n                                                    </Button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n                }\r\n                {/* show deck after accepted invited */}\r\n                <Row style={{marginTop:'2%'}}>\r\n                        {acceptInvited && Object.keys(deckSelected).length === 0 &&\r\n                            myDeck.map((item, index) =>\r\n                                <Col xs={6} md={3} lg={2} key={index}>\r\n                                    <Card \r\n                                        style={{ \r\n                                            border:'none',\r\n                                            cursor:'pointer'\r\n                                        }}\r\n                                        onClick={() => {handleDeckSelected(item)}}\r\n                                    >\r\n                                        <Card.Img variant=\"top\" src={item.DeckImage}/>\r\n                                        <Card.Body >\r\n                                            <Card.Title style={{textAlign:'center'}}>{item.DeckName}</Card.Title>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Col>\r\n                            )\r\n                        }\r\n                    </Row>\r\n                    {/* show deck selected after select deck */}\r\n                    {Object.keys(deckSelected).length !== 0 &&\r\n                        <>\r\n                            <Row className=\"justify-content-center\">\r\n                                <Col xs={6} sm={6} md={3} lg={3}>\r\n                                    <Card \r\n                                        style={{ \r\n                                            border:'none',\r\n                                        }}\r\n                                    >\r\n                                        <Card.Img variant=\"top\" src={deckSelected.DeckImage}/>\r\n                                        <Card.Body >\r\n                                            <Card.Title style={{textAlign:'center'}}>{deckSelected.DeckName}</Card.Title>\r\n                                            <Link to=\"/Play\">\r\n                                                <Button \r\n                                                    style={{ width:'100%' }} \r\n                                                    onClick={\r\n                                                        () => {\r\n                                                            props.handleInvitedReadyPlay({\r\n                                                                deckId:deckSelected.DeckId,\r\n                                                                opponentId:inviteId,\r\n                                                            })\r\n                                                        }}\r\n                                                >\r\n                                                    Let's Play !\r\n                                                </Button>\r\n                                            </Link>\r\n                                            <Button variant=\"danger\" style={{ width:'100%', marginTop:'4%' }}>เลือกเด็คใหม่</Button>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </>\r\n                    }\r\n            </Container>\r\n        </>\r\n    )\r\n};",{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"200","replacedBy":"204"},{"ruleId":"202","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":62,"column":32,"nodeType":"208","endLine":63,"endColumn":54,"suggestions":"209"},{"ruleId":"206","severity":1,"message":"210","line":22,"column":8,"nodeType":"208","endLine":22,"endColumn":21,"suggestions":"211"},{"ruleId":"212","severity":1,"message":"213","line":81,"column":74,"nodeType":"214","messageId":"215","endLine":81,"endColumn":75},{"ruleId":"216","severity":1,"message":"217","line":4,"column":8,"nodeType":"218","messageId":"219","endLine":4,"endColumn":21},{"ruleId":"200","replacedBy":"220"},{"ruleId":"202","replacedBy":"221"},{"ruleId":"206","severity":1,"message":"222","line":105,"column":8,"nodeType":"208","endLine":105,"endColumn":10,"suggestions":"223"},{"ruleId":"216","severity":1,"message":"224","line":8,"column":5,"nodeType":"218","messageId":"219","endLine":8,"endColumn":10},{"ruleId":"225","severity":1,"message":"226","line":12,"column":1,"nodeType":"227","endLine":142,"endColumn":3},{"ruleId":"206","severity":1,"message":"228","line":30,"column":8,"nodeType":"208","endLine":30,"endColumn":10,"suggestions":"229"},{"ruleId":"216","severity":1,"message":"230","line":8,"column":12,"nodeType":"218","messageId":"219","endLine":8,"endColumn":25},{"ruleId":"216","severity":1,"message":"231","line":8,"column":27,"nodeType":"218","messageId":"219","endLine":8,"endColumn":43},{"ruleId":"225","severity":1,"message":"226","line":6,"column":1,"nodeType":"227","endLine":69,"endColumn":3},{"ruleId":"225","severity":1,"message":"226","line":4,"column":1,"nodeType":"227","endLine":74,"endColumn":3},{"ruleId":"225","severity":1,"message":"226","line":9,"column":1,"nodeType":"227","endLine":107,"endColumn":3},{"ruleId":"225","severity":1,"message":"226","line":13,"column":1,"nodeType":"227","endLine":237,"endColumn":3},{"ruleId":"206","severity":1,"message":"232","line":104,"column":8,"nodeType":"208","endLine":104,"endColumn":10,"suggestions":"233"},{"ruleId":"206","severity":1,"message":"232","line":122,"column":8,"nodeType":"208","endLine":122,"endColumn":20,"suggestions":"234"},{"ruleId":"225","severity":1,"message":"226","line":14,"column":1,"nodeType":"227","endLine":187,"endColumn":3},{"ruleId":"206","severity":1,"message":"232","line":83,"column":8,"nodeType":"208","endLine":83,"endColumn":16,"suggestions":"235"},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],["236"],["237"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.userId'. Either include it or remove the dependency array.","ArrayExpression",["238"],"React Hook useEffect has a missing dependency: 'props.userDeck'. Either include it or remove the dependency array.",["239"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'ResetPassword' is defined but never used.","Identifier","unusedVar",["236"],["237"],"React Hook useEffect has a missing dependency: 'deckId'. Either include it or remove the dependency array.",["240"],"'Table' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'props.series' and 'series'. Either include them or remove the dependency array.",["241"],"'allCardSeries' is assigned a value but never used.","'setAllCardSeries' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["242"],["243"],["244"],"no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},"Update the dependencies array to be: [Deck, BackRow, CheckZone, ClimaxZone, Clock, FrontRow, Hand, Level, Memory, Stock, WaitingRoom, props.userId]",{"range":"259","text":"260"},"Update the dependencies array to be: [props.image, props.userDeck]",{"range":"261","text":"262"},"Update the dependencies array to be: [deckId]",{"range":"263","text":"264"},"Update the dependencies array to be: [props.series, series]",{"range":"265","text":"266"},"Update the dependencies array to be: [db]",{"range":"267","text":"268"},"Update the dependencies array to be: [db, myInviteId]",{"range":"269","text":"270"},"Update the dependencies array to be: [db, userId]",{"range":"271","text":"272"},[2139,2235],"[Deck, BackRow, CheckZone, ClimaxZone, Clock, FrontRow, Hand, Level, Memory, Stock, WaitingRoom, props.userId]",[734,747],"[props.image, props.userDeck]",[4112,4114],"[deckId]",[1064,1066],"[props.series, series]",[3595,3597],"[db]",[4248,4260],"[db, myInviteId]",[2675,2683],"[db, userId]"]